
# ElasticSearch
#  注意docker-compose.yml文件的位置与默认命名的关系(构建镜像名、网络名、挂载卷名/var/lib/docker/volumes/)

version: '3.8'

services:

  # redis 不指定配置文件
  redis:
    image: redis:6.2
    container_name: redis # 默认命名=项目名称_服务名称_序号
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - custom
    command: redis-server --appendonly yes --requirepass 123456789

  # redis 指定配置文件。自动构建镜像名=项目名称_服务名称
  redis_own_conf:
    build:
      context: ./redis
      dockerfile: Dockerfile
    container_name: redis_own_conf
    hostname: redis_own_conf
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_own_conf_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - custom
    command: redis-server /usr/local/etc/redis/redis.conf

  # 用node.js编写的Redis Web管理工具 https://hub.docker.com/r/rediscommander/redis-commander
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    hostname: redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:123456789,local:redis_own_conf:6379:0:123456789
      - HTTP_USER=redis
      - HTTP_PASSWORD=123456789
    ports:
      - "16379:8081"
    networks:
      - custom
    depends_on:
      - redis
      - redis_own_conf

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=123456789
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - custom

  # Minio
  minio:
    image: minio/minio:RELEASE.2021-04-06T23-11-00Z
    container_name: minio
    hostname: minio
    restart: unless-stopped
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=123456789
    ports:
      - "9000:9000"
    volumes:
      - /data/minio:/data
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - custom

  # Nginx
  nginx:
    image: nginx:1.18.0
    container_name: nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf/mime.types:/etc/nginx/mime.types
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf/conf.d:/etc/nginx/conf.d
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./nginx/log:/var/log/nginx
    environment:
      - TZ=Asia/Shanghai
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost"]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3
    depends_on:
      - minio
    networks:
      - custom

  # Nacos 1.0.0
  # nacos:
  #   image: nacos/nacos-server:1.0.0
  #   container_name: nacos
  #   hostname: nacos
  #   restart: unless-stopped
  #   environment:
  #     - MODE=standalone
  #     - PREFER_HOST_MODE=nacos
  #   ports:
  #     - "8848:8848"
  #   volumes:
  #     - ./nacos/standalone-logs/:/home/nacos/logs
  #     - nacos_data:/home/nacos/data
  #   networks:
  #     - custom

  # MySQL
  mysql:
    image: nacos/nacos-mysql:8.0.16
    container_name: mysql
    hostname: mysql
    env_file:
      - ./nacos/env/mysql.env
    volumes:
      - /data/mysql:/var/lib/mysql
    networks:
      - custom
    ports:
      - "3306:3306"

  # Nacos集群hostname，restart必须是always
  nacos1:
    image: nacos/nacos-server:${NACOS_VERSION}
    container_name: nacos1
    hostname: nacos1
    restart: unless-stopped
    env_file:
      - ./nacos/env/nacos-hostname.env
    ports:
      - "8849:8848"
      - "9555:9555"
    volumes:
      - ./nacos/cluster-logs/nacos1:/home/nacos/logs
      - ./nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
    networks:
      - custom
    depends_on:
      - mysql

  nacos2:
    image: nacos/nacos-server:${NACOS_VERSION}
    container_name: nacos2
    hostname: nacos2
    restart: unless-stopped
    env_file:
      - ./nacos/env/nacos-hostname.env
    ports:
      - "8850:8848"
    volumes:
      - ./nacos/cluster-logs/nacos2:/home/nacos/logs
      - ./nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
    networks:
      - custom
    depends_on:
      - mysql

  nacos3:
    image: nacos/nacos-server:${NACOS_VERSION}
    container_name: nacos3
    hostname: nacos3
    restart: unless-stopped
    env_file:
      - ./nacos/env/nacos-hostname.env
    ports:
      - "8851:8848"
    volumes:
      - ./nacos/cluster-logs/nacos3:/home/nacos/logs
      - ./nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
    networks:
      - custom
    depends_on:
      - mysql



networks:
  default:
  custom:
    driver: bridge

volumes:
  redis_data:
  redis_own_conf_data:
  rabbitmq_data:
  nacos_data:



